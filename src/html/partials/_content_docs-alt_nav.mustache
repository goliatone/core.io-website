    <div class="content">
    
      <div class="row">
        {{#data_docs_menu}}
          {{>_nav-bar}}
        {{/data_docs_menu}}

        {{#search_bars}}
        {{#docs}}
          {{>_search_bar}}
        {{/docs}}
        {{/search_bars}}
      </div>

      <div class="cols">
        
        <div class="col-2">
          {{#docs_side_menu}}
            {{>_nav-bar}}
          {{/docs_side_menu}}
        </div>
        
        <div class="col-2">
          <hr class="hr-wide"/>
          <div class="main-txt">
            <h3 class="title h-smaller-italic">core.io documentation</h3>
          
            <div class="description p-medium-3">
              <p>core.io provides a structure to quickly prototype Node.js applications of any type, providing a set of guidelines and conventions to ease development.</p>
              <p>In a way core.io aims to be a workflow rather than a framework by providing a common application structure regardless if the application is web, desktop, or data focused.</p>
              <p>core.io provides basic building blocks which are useful in any context and help with command tasks like configuration management, logging, dependency management and more basic needs of most applications.</p>
              <p>The heart of core.io is the application context, which you can extend directly with custom logic or indirectly with modules.</p>
              <p>Modules are intended to encapsulate code and make it portable. They also serve as glue to integrate libraries like Socket.IO or AMQP into your project.</p>
              <p>Following simple conventions on how files are named and where those files are placed core.io will auto-load, auto-configure, and auto-wire components always leaving you the choice to override defaults or create custom modules to replace core functionality.</p>
            </div>

            <div class="code-block">
              <pre><code>
class MyClass {
    constructor(options){
        options = extend({}, MyClass.DEFAULTS, options);
        if(options.autoinitialize) {
            this.init(options);
        }
    }

    init(options={}) {
        extend(this, options);
    }
}

MyClass.DEFAULTS = {
    autoinitialize: true;
    getName: function() {
        return this.name;
    },
    name: 'MyClass'
}
              </code></pre>
            </div>
          </div>
        </div>
      </div>

    </div><!-- END CONTENT -->
